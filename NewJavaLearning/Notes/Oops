# encapsulation
    Encapsulation in Java refers to the bundling of data and
    methods that operate on the data within a single unit, typically known as a class.
    It's one of the four fundamental Object-Oriented Programming (OOP)

    Key Points of Encapsulation: Data Hiding , Controlled Access , Improves Maintainability
        and Flexibility , Modularity

    concepts, along with inheritance, polymorphism, and abstraction. In brief:

# this is a key word which represent current object

# constructor

    A constructor in object-oriented programming (OOP) is a special type of method or function
    that is automatically called when an instance (i.e., object) of a class is created.
    Its primary purpose is to initialize the newly created object and set its initial state.

# by default every constructor will have a super() in it
    super() calls the constructor of super class
# this() will executes the constructor of the same class

#   In Java, an anonymous object refers to an object that is instantiated without assigning it
    to a variable. Instead,it is typically used for immediate method invocation or
    passing as an argument to a method.
# if the is multiple class extend one after another like a extend b and b extend c c is the
     super class (Parent class) it is multi-level inheritance
   but if two class do it , it is single level inheritance a extend b

   Multiple Inheritance in java will not work
   reason : - ambiguity
   let take that a and b are two parent classes with function y() in both
   now c extends a,b and now I want to call objc.y() but as there is not function
   in c it will look at the parents but both parent has same function he will be confuse
   to choose which one to take for this reason java dev decided to remove Multiple-Inheritance
   from java
# Method overriding :
    Method overriding in Java occurs when a subclass provides a specific implementation
    for a method that is already defined in its superclass. This allows a subclass to provide
    its own implementation of a method defined in its superclass, thereby customizing
    the behavior of that method for the subclass. Method overriding is a fundamental
    concept in object-oriented programming and enables polymorphism.

# Method Overloading :
    Method with same name but different parameters and return type

# polymorphism (poly : many , Morphism : behaviour)
    there are two type of polymorphism
        1)compile time
        2)Run time
    we can mention type as parent but the object can be of child  ex: A obj = new B() , B extends A ,
    A is the parent class
   Dynamic Method dispatch (read from gpt)

# final - variable , method , class if you make ur class final no one can extend it
    and if you make ur method final no one can override it and for variable
    it is use to make the variable constant


# Object Class:(https://youtu.be/4XTsAAHW_Tc?t=26898)

# upcasting and downCasting (https://youtu.be/4XTsAAHW_Tc?t=27575)

# wrapper class : (https://youtu.be/4XTsAAHW_Tc?t=28034)
    Wrapper, in general, is referred to a larger entity that encapsulates a smaller entity. Here in Java,
    the wrapper class is an object class that encapsulates the primitive data types.
    Why do we need wrapper classes?
        Wrapper classes are final and immutable
        Provides methods like valueOf(), parseInt(), etc.
        It provides the feature of autoboxing and unboxing.

# abstract class : you cannot create object of abstract class but u can create instance of abstract class (A obj)

# static can be use only for inner class (https://youtu.be/4XTsAAHW_Tc?t=29243)

# interface (https://youtu.be/4XTsAAHW_Tc?t=29899)

# class - class -> extends
    class - interface -> implement (we can Implement multiple interfaces in same class)
    interface - interface -> extends

# enums (https://youtu.be/4XTsAAHW_Tc?t=30924): enum nameOfEnum{  u cannot extends enum in other class
                                                    constants
                                                 }
     in java enum is a class

# annotation we want to give extra information to the compiler

#Different type of interfaces -:
    1.Normal
    2.Functional/SAM(Single Abstract Method)
    3.Marker (it is a blank interface) (https://youtu.be/4XTsAAHW_Tc?t=32732)


# functional Interface - a interface which has only one method

# lambda(https://youtu.be/4XTsAAHW_Tc?t=33151): it works only with the functional interface
