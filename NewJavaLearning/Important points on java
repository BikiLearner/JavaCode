Link:https://youtu.be/4XTsAAHW_Tc?si=juiKUlGcUeufWR26

JAVA Interview question(https://www.geeksforgeeks.org/java-interview-questions/)

# J shell to write java command in command prompt
# Java is strongly typed language (Statically typed language)

# 1 byte -> 8 bits

# JIT (https://youtu.be/d7KHAVaX_Rs?si=X-3l98bLQqSCipAT)
    JIT stands for (Just-in-Time) compiler is a part of JRE(Java Runtime Environment),
    it is used for better performance of the Java applications during run-time.
    The use of JIT is mentioned in step by step process mentioned below:

    1.Source code is compiled with javac compiler to form bytecode
    2.Bytecode is further passed on to JVM
    3.JIT is a part of JVM, JIT is responsible for compiling bytecode into native machine code at run time.
    4.The JIT compiler is enabled throughout, while it gets activated when a method is invoked.
         For a compiled method, the JVM directly calls the compiled code, instead of interpreting it.
    5.As JVM calls the compiled code that increases the performance and speed of the execution.

# java follows UNICODE in case of char so it takes 2 bytes

# u can use 0b(your binary number) in between to user binary number ( ex : int num =  0b0001) for hexa or others u can do so 
    search the internet and also u can put _ in between 00 for extra readability

# explicit conversion is known a casting and Implicit conversion is known a Conversion

# when u caste from int data type to byte it does modulus operation ( % with maximum value of byte )
    ex:int r=20; byte b=(int) r;
    b=r % 256(highest value of byte)
# type promotion byte a=20; byte b=30; int c=a * b where (a * b) should produce byte but java
    say not to worry we promote them to int this is known a type promotion
# if you know the range then use for loop if u had some condition then use while or do while

# && , || - short circuit

# Major Elements in OOP - classes and object , Polymorphism , Encapsulation , Inheritance
# Minor Elements in OOP - Interface , Abstract Classes , annotation , packages

# ClassLoader - Is the part of JRE that dynamically load classes in JVM
     The Java run time system does not need to know about files and
     file systems because of classloaders.
     Types : BootStrap ClassLoader , Extension ClassLoader , System ClassLoader

# object has properties and behaviours

# JVM where the byte code execute
# JRE are the external file need to run the code
# JVM is a part of JRE

# instance variable is a part of heap not stack and local variable is the part of stack of
    particular function (Link : https://youtu.be/4XTsAAHW_Tc?t=12980)
# object is created in heap memory
# Every method will have it own stack
# stack will have a key and a value

# In Java, the order of the static and public keywords in the main method declaration
    does not matter. Both public static void main(String[] args) and
    static public void main(String[] args) are valid and functionally equivalent.
    This is because Java allows the access modifier (public) and the keyword (static) to appear
    in any order as long as they are both present before the return type (void).
    Therefore, writing static public void main(String[] args) will work the same way as public
    static void main(String[] args).

# Array in java is an object 
    jagged array int num[][]=new int[2][];
        num[0]=new int [3];
        num[1]=new int [5];

    draw backs of array Read form gpt

# what is static keyword making something as a class member not a object member
    (https://youtu.be/4XTsAAHW_Tc?t=18339)
    static block is use to initialize static variable
    syntax: static{other = "Hi Moto"}

    you can use static variable in static method but you can't use non - static variable in
    static method

    every time create object there is two step ur call load  & object are instantiate
    in JVM there is a special space known a class loader

    why main needs to be static?
        Main method is the starting point of the program so if we do not make it static then
        we have to create the object of the class where main method is present but how can
        we create object without starting the program so it will be in a deadlock situation
    GPT explained
      1) The main method is called by the JVM before any objects of the class are created.
         Therefore, it must be declared as static to indicate that it belongs to the class
         itself,not to any specific instance of the class.
      2)No Object Creation: If the main method were not static,
        the JVM would require an object of the class containing the main method to call it.
        However, since main is the entry point, no objects have been created yet.
        This creates a circular dependency: to run the program, you
        need to create an object, but to create an object, you need to run the program.
      3)Deadlock Situation: As you correctly mentioned,
        if the main method were not static, creating an object to call main would
        lead to a deadlock situation, as it would require the program to start
        executing before it could create an object, and vice versa.


# Class.forName() it basically load your class if you want to load your class without
  creating any object it also throws exception name ClassNotBeFoundException

# this is a key word which represent current object (https://youtu.be/4XTsAAHW_Tc?t=20221)

# Every Class in java extend Object class (yes the name of the class is Object) it is by
    default and u cannot see it but it is there
    public class hello (invisible) extend Object{

    }
# Thread (https://youtu.be/4XTsAAHW_Tc?t=38051) in every the u need to have a run method

# Thread + Mutation is not an good Idea
# Thread safe mean only one thread can work with that at one point (Raise condition)
# To ensure that one thread at a time can access the variable we use synchronise key word in
    that method or variable

# states available to threads
    1) new state( when we create a thread)
    2) runnable state
    3) Running state
    4) waiting state
    5) dead state

#   1) Collection Api (Concept)
    2) collections (Class)
    3) collection (Interface)

# stream Api

# LVTI = local variable type inference (https://youtu.be/4XTsAAHW_Tc?t=45686)

# sealed class can be extend by only those who has the permit
    public sealed class B permits Biki
    the classes who extend sealed class (subclass) must be sealed or final or non-sealed
    permits should be last thing after implements and extends
# record for dataclass in java sames as kotlin record is a class behind the scene
    and it cannot extend any other class but u can implement interfaces

# What is the purpose of using BufferedInputStream and BufferedOutputStream classes?
    BufferedInputStream and outputStream Improves the input / output performance of file or stream


# println() method belongs to PrintStream class
# out is the object of PrintStream which is present in System class
# in is object of InputStream which is present in System class
# System.in.read() give a  ASCII value and it read one input